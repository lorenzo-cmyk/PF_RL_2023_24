--- Componente: FSM ---

--- Librerie ---
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;

--- Definizione della entità  ---
ENTITY FSM IS
	PORT
	(
		CMP_MACHINE_CONDITIONS_S0 : IN  STD_LOGIC;
		CMP_MACHINE_CONDITIONS_S1 : IN  STD_LOGIC;
		CMP_LOOP_CONDITION_S0     : IN  STD_LOGIC;
		LAST_VALID_VALUE_FZR      : OUT STD_LOGIC;
		LAST_VALID_VALUE_ENB      : OUT STD_LOGIC;
		REG_CREDIBILITY_FZR       : OUT STD_LOGIC;
		REG_CREDIBILITY_FLL       : OUT STD_LOGIC;
		REG_CREDIBILITY_DEC       : OUT STD_LOGIC;
		REG_LOOP_COUNT_FZR        : OUT STD_LOGIC;
		REG_LOOP_COUNT_INC        : OUT STD_LOGIC;
		REG_CURR_ADDRESS_ENB      : OUT STD_LOGIC;
		REG_CURR_ADDRESS_INC      : OUT STD_LOGIC;
		MUX_MEMORY_SEL            : OUT STD_LOGIC;
		STR                       : IN  STD_LOGIC;
		CLK                       : IN  STD_LOGIC;
		RST                       : IN  STD_LOGIC;
		MEM_WE                    : OUT STD_LOGIC;
		MEM_EN                    : OUT STD_LOGIC;
		DONE                      : OUT STD_LOGIC
	);
END FSM;

--- Architettura (behavioural) del componente ---
ARCHITECTURE FSM_ARCH OF FSM IS
	TYPE STATE IS (STARTING_POINT, RESET_REGISTERS, CHECK_LOOP_CONDITION, CHECK_LOOP_CONDITION_WM, 
	     FILL_CREDIBILITY, RAM_TO_REG_LVV, RAM_TO_REG_LVV_WM, REG_TO_RAM_LVV, 
		 DECREASE_CREDIBILITY, INCREASE_ADDRESS_COUNTER, REG_TO_RAM_CC, INCREASE_ADDRC_LPC, ELABORATION_ENDED);
	SIGNAL CURRENT_STATE : STATE;
BEGIN
	PROCESS (CLK, RST)
	BEGIN
		IF RST = '1' THEN
			CURRENT_STATE <= STARTING_POINT;
		ELSIF CLK'EVENT AND CLK = '1' THEN
			CASE CURRENT_STATE IS
				WHEN STARTING_POINT =>
					IF STR = '1' THEN
						CURRENT_STATE <= RESET_REGISTERS;
					ELSE
						CURRENT_STATE <= STARTING_POINT;
					END IF;
				WHEN RESET_REGISTERS =>
					CURRENT_STATE <= CHECK_LOOP_CONDITION;
				WHEN CHECK_LOOP_CONDITION =>
					CURRENT_STATE <= CHECK_LOOP_CONDITION_WM;
				WHEN CHECK_LOOP_CONDITION_WM =>
					IF CMP_LOOP_CONDITION_S0 = '1' THEN
						CURRENT_STATE <= ELABORATION_ENDED;
					ELSIF CMP_LOOP_CONDITION_S0 = '0' AND CMP_MACHINE_CONDITIONS_S0 = '0' THEN
						CURRENT_STATE <= FILL_CREDIBILITY;
					ELSIF CMP_LOOP_CONDITION_S0 = '0' AND CMP_MACHINE_CONDITIONS_S0 = '1' THEN
						CURRENT_STATE <= REG_TO_RAM_LVV;
					END IF;
				WHEN FILL_CREDIBILITY =>
					CURRENT_STATE <= RAM_TO_REG_LVV;
				WHEN RAM_TO_REG_LVV =>
					CURRENT_STATE <= RAM_TO_REG_LVV_WM;
				WHEN RAM_TO_REG_LVV_WM =>
					CURRENT_STATE <= INCREASE_ADDRESS_COUNTER;
				WHEN INCREASE_ADDRESS_COUNTER =>
					CURRENT_STATE <= REG_TO_RAM_CC;
				WHEN REG_TO_RAM_CC =>
					CURRENT_STATE <= INCREASE_ADDRC_LPC;
				WHEN INCREASE_ADDRC_LPC =>
					CURRENT_STATE <= CHECK_LOOP_CONDITION;
				WHEN REG_TO_RAM_LVV =>
					IF CMP_MACHINE_CONDITIONS_S1 = '1' THEN
						CURRENT_STATE <= DECREASE_CREDIBILITY;
					ELSE
						CURRENT_STATE <= INCREASE_ADDRESS_COUNTER;
					END IF;
				WHEN DECREASE_CREDIBILITY =>
					CURRENT_STATE <= INCREASE_ADDRESS_COUNTER;
				WHEN ELABORATION_ENDED =>
					IF STR = '1' THEN
						CURRENT_STATE <= ELABORATION_ENDED;
					ELSIF STR = '0' THEN
						CURRENT_STATE <= STARTING_POINT;
					END IF;
			END CASE;
		END IF;
	END PROCESS;

	PROCESS (CURRENT_STATE)
	BEGIN
		LAST_VALID_VALUE_FZR <= '0';
		LAST_VALID_VALUE_ENB <= '0';
		REG_CREDIBILITY_FZR <= '0';
		REG_CREDIBILITY_FLL <= '0';
		REG_CREDIBILITY_DEC <= '0';
		REG_LOOP_COUNT_FZR <= '0';
		REG_LOOP_COUNT_INC <= '0';
		REG_CURR_ADDRESS_ENB <= '0';
		REG_CURR_ADDRESS_INC <= '0';
		MUX_MEMORY_SEL <= '0';
		MEM_WE <= '0';
		MEM_EN <= '1';
		DONE <= '0';
	    
	    --- STARTING_POINT: Omesso, le sue uscite sono uguali al caso base.
		IF CURRENT_STATE = RESET_REGISTERS THEN
			LAST_VALID_VALUE_FZR <= '1';
			REG_CREDIBILITY_FZR <= '1';
			REG_LOOP_COUNT_FZR <= '1';
			REG_CURR_ADDRESS_ENB <= '1';
		--- CHECK_LOOP_CONDITION_WM: Omesso, le sue uscite sono uguali al caso base.
		--- CHECK_LOOP_CONDITION: Omesso, le sue uscite sono uguali al caso base.
		ELSIF CURRENT_STATE = FILL_CREDIBILITY THEN
			REG_CREDIBILITY_FLL <= '1';
		ELSIF CURRENT_STATE = RAM_TO_REG_LVV THEN
			LAST_VALID_VALUE_ENB <= '1';
		ELSIF CURRENT_STATE = RAM_TO_REG_LVV_WM THEN
			LAST_VALID_VALUE_ENB <= '1';
		ELSIF CURRENT_STATE = INCREASE_ADDRESS_COUNTER THEN
			REG_CURR_ADDRESS_INC <= '1';
		ELSIF CURRENT_STATE = REG_TO_RAM_CC THEN
			MUX_MEMORY_SEL <= '1';
			MEM_WE <= '1';
		ELSIF CURRENT_STATE = REG_TO_RAM_LVV THEN
			MEM_WE <= '1';
		ELSIF CURRENT_STATE = DECREASE_CREDIBILITY THEN
			REG_CREDIBILITY_DEC <= '1';
		ELSIF CURRENT_STATE = INCREASE_ADDRC_LPC THEN
			REG_LOOP_COUNT_INC <= '1';
			REG_CURR_ADDRESS_INC <= '1';
		ELSIF CURRENT_STATE = ELABORATION_ENDED THEN
			DONE <= '1';
		END IF;
	END PROCESS;
END FSM_ARCH;